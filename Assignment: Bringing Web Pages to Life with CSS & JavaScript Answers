                              index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Web Experience</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <header>
        <h1>Interactive Web Experience</h1>
    </header>

    <main>
        <!-- Part 1: CSS Animations -->
        <section id="cssAnimations">
            <h2>CSS Animations</h2>
            
            <div class="demo-box">
                <h3>Transitions</h3>
                <button class="btn-transition">Hover Me</button>
                <div class="box-transition"></div>
            </div>
            
            <div class="demo-box">
                <h3>Keyframe Animations</h3>
                <div class="box-keyframe"></div>
                <button class="toggle-animation">Pulse Animation</button>
            </div>
        </section>

        <!-- Part 2: JavaScript Functions -->
        <section id="jsFunctions">
            <h2>JavaScript Functions</h2>
            
            <div class="demo-box">
                <h3>Scope & Parameters</h3>
                <div class="calc-box">
                    <input type="number" id="num1" placeholder="First number">
                    <input type="number" id="num2" placeholder="Second number">
                    <button id="calculateBtn">Calculate Sum</button>
                    <p id="result"></p>
                </div>
            </div>
            
            <div class="demo-box">
                <h3>Reusable Animation Function</h3>
                <button id="animateBoxBtn">Animate Box</button>
                <div id="animatedBox" class="box"></div>
            </div>
        </section>

        <!-- Part 3: Combined Animations -->
        <section id="combinedAnimations">
            <h2>Combined CSS & JS</h2>
            
            <div class="demo-box">
                <h3>Card Flip</h3>
                <div class="card-container">
                    <div class="card" id="flipCard">
                        <div class="card-front">Click to Flip</div>
                        <div class="card-back">Magic!</div>
                    </div>
                </div>
            </div>
            
            <div class="demo-box">
                <h3>Modal Popup</h3>
                <button id="openModalBtn">Open Modal</button>
                <div class="modal" id="modal">
                    <div class="modal-content">
                        <span class="close-btn">&times;</span>
                        <h3>Hello from the modal!</h3>
                        <p>This modal was animated with CSS but controlled by JavaScript.</p>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <footer>
        <p>Dynamic Web Assignment</p>
    </footer>

    <script src="script.js"></script>
</body>
</html>

                         style.css
/* Base Styles */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 20px;
    color: #333;
    max-width: 1000px;
    margin: 0 auto;
}

header {
    background-color: #3498db;
    color: white;
    padding: 20px;
    text-align: center;
    margin-bottom: 20px;
    border-radius: 5px;
}

section {
    margin-bottom: 30px;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.demo-box {
    background-color: #f9f9f9;
    padding: 15px;
    border-radius: 5px;
    margin-top: 15px;
}

button {
    background-color: #2ecc71;
    color: white;
    border: none;
    padding: 8px 15px;
    margin: 5px;
    border-radius: 3px;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #27ae60;
}

/* Part 1: CSS Animations */
.btn-transition {
    transition: all 0.3s ease;
}

.btn-transition:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.box-transition {
    width: 100px;
    height: 100px;
    background-color: #e74c3c;
    margin: 20px 0;
    transition: 
        background-color 0.5s ease,
        transform 0.5s ease,
        border-radius 0.5s ease;
}

.box-transition:hover {
    background-color: #3498db;
    transform: rotate(45deg);
    border-radius: 50%;
}

.box-keyframe {
    width: 100px;
    height: 100px;
    background-color: #9b59b6;
    margin: 20px 0;
}

.pulse {
    animation: pulse 1.5s infinite;
}

@keyframes pulse {
    0% {
        transform: scale(1);
        opacity: 1;
    }
    50% {
        transform: scale(1.1);
        opacity: 0.7;
    }
    100% {
        transform: scale(1);
        opacity: 1;
    }
}

/* Part 2: JS Functions */
.calc-box {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

input {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 3px;
}

.box {
    width: 100px;
    height: 100px;
    background-color: #f39c12;
    margin: 20px 0;
}

/* Part 3: Combined Animations */
.card-container {
    perspective: 1000px;
}

.card {
    width: 200px;
    height: 200px;
    position: relative;
    transform-style: preserve-3d;
    transition: transform 0.6s;
    cursor: pointer;
}

.card-front, .card-back {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.card-front {
    background-color: #3498db;
    color: white;
}

.card-back {
    background-color: #e74c3c;
    color: white;
    transform: rotateY(180deg);
}

.card.flipped {
    transform: rotateY(180deg);
}

.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s, visibility 0.3s;
    z-index: 100;
}

.modal.active {
    opacity: 1;
    visibility: visible;
}

.modal-content {
    background-color: white;
    padding: 20px;
    border-radius: 5px;
    max-width: 500px;
    width: 90%;
    transform: translateY(-20px);
    transition: transform 0.3s;
}

.modal.active .modal-content {
    transform: translateY(0);
}

.close-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 1.5rem;
    cursor: pointer;
}

/* Animation Classes */
.slide-in {
    animation: slideIn 0.5s forwards;
}

@keyframes slideIn {
    from {
        transform: translateX(-100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.rotate {
    animation: rotate 2s linear infinite;
}

@keyframes rotate {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

                   script.js
/**************************************
 * Part 1: CSS Animations
 * (Mostly handled in CSS)
 **************************************/

// Toggle keyframe animation with button
const toggleAnimationBtn = document.querySelector('.toggle-animation');
const boxKeyframe = document.querySelector('.box-keyframe');

toggleAnimationBtn.addEventListener('click', () => {
    boxKeyframe.classList.toggle('pulse');
    toggleAnimationBtn.textContent = boxKeyframe.classList.contains('pulse') 
        ? 'Stop Animation' 
        : 'Pulse Animation';
});

/**************************************
 * Part 2: JavaScript Functions
 * Scope, parameters, and return values
 **************************************/

// Example 1: Function with parameters and return value
function calculateSum(a, b) {
    // Local scope variables
    const result = a + b;
    return result;
}

// Using the function
const calculateBtn = document.getElementById('calculateBtn');
const num1Input = document.getElementById('num1');
const num2Input = document.getElementById('num2');
const resultDisplay = document.getElementById('result');

calculateBtn.addEventListener('click', () => {
    // Get values from inputs (convert to numbers)
    const num1 = parseFloat(num1Input.value) || 0;
    const num2 = parseFloat(num2Input.value) || 0;
    
    // Call function and display result
    const sum = calculateSum(num1, num2);
    resultDisplay.textContent = `Result: ${sum}`;
});

// Example 2: Reusable animation function
function animateElement(element, animationClass, duration = 1000) {
    // Add animation class
    element.classList.add(animationClass);
    
    // Remove after duration
    setTimeout(() => {
        element.classList.remove(animationClass);
    }, duration);
}

// Using the animation function
const animateBoxBtn = document.getElementById('animateBoxBtn');
const animatedBox = document.getElementById('animatedBox');

animateBoxBtn.addEventListener('click', () => {
    animateElement(animatedBox, 'slide-in');
});

/**************************************
 * Part 3: Combining CSS & JavaScript
 * Triggering CSS animations with JS
 **************************************/

// Card flip animation
const flipCard = document.getElementById('flipCard');

flipCard.addEventListener('click', () => {
    flipCard.classList.toggle('flipped');
});

// Modal animation
const modal = document.getElementById('modal');
const openModalBtn = document.getElementById('openModalBtn');
const closeBtn = document.querySelector('.close-btn');

openModalBtn.addEventListener('click', () => {
    modal.classList.add('active');
});

closeBtn.addEventListener('click', () => {
    modal.classList.remove('active');
});

// Close modal when clicking outside
modal.addEventListener('click', (e) => {
    if (e.target === modal) {
        modal.classList.remove('active');
    }
});

/**************************************
 * Bonus: More Complex Animation Control
 **************************************/

// Dynamic animation selector
function applyAnimation(element, animationType) {
    // First remove all animation classes
    element.classList.remove('slide-in', 'rotate', 'pulse');
    
    // Then add the selected one
    switch(animationType) {
        case 'slide':
            element.classList.add('slide-in');
            break;
        case 'rotate':
            element.classList.add('rotate');
            break;
        case 'pulse':
            element.classList.add('pulse');
            break;
        default:
            console.log('Unknown animation type');
    }
}

// Example usage:
// applyAnimation(animatedBox, 'rotate');



